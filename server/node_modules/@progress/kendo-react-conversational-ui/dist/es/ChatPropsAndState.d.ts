import { Message, User, ChatActionExecuteEvent, ChatMessageSendEvent } from './main';
import { ViewItem } from './ViewItem';
export interface ChatProps {
    /**
     * Sets the messages of the Chat.
     */
    messages: Message[];
    /**
     * Sets the [`User`]({% slug api_conversational-ui %}) instance for the local user. The User ID identifies messages that are authored by the local user.
     */
    user: User;
    /**
     * A React functional or class component which is used as a message template. The corresponding [`message`]({% slug api_conversational-ui_message %}) is passed to the component as a property by the name `item`.
     */
    messageTemplate?: any;
    /**
     * A React functional or class component which is used as an attachment template ([see example]({% slug attachments_chat %}#toc-attachment-templates)). The corresponding [`attachment`]({% slug api_conversational-ui_attachment %}) is passed to the component as a property by the name `item`.
     */
    attachmentTemplate?: any;
    /**
     * Sets the width of the Chat.
     */
    width?: string | number;
    /**
     * Fires when the user types a message and clicks the **Send** button or presses **Enter**. Emits the [`MessageSendEvent`]({% slug api_conversational-ui_chatmessagesendevent %}).
     *
     * > The Chat is not automatically updated with the new message.
     */
    onMessageSend?: (event: ChatMessageSendEvent) => void;
    /**
     * Fires when the user clicks a quick action button. The Chat internally handles the `reply`, `openUrl`, and `call` [known actions]({% slug api_conversational-ui_actiontype %}). Emits the [`ExecuteActionEvent`]({% slug api_conversational-ui_chatactionexecuteevent %}). The event is preventable. If `preventDefault` is called, the built-in action will be suppressed.
     */
    onActionExecute?: (event: ChatActionExecuteEvent) => void;
    /**
     * Sets the direction of the Chat component.
     */
    dir?: string;
    /**
     * The text which is visible inside the new message input when the message input is empty.
     */
    placeholder?: string;
}
/**
 * @hidden
 */
export interface ChatState {
    viewItems: ViewItem[];
    selectedItemIndex: number | null;
    isDirectionRightToLeft: boolean | null;
}
