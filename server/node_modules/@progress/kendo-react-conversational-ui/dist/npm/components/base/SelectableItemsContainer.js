"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var kendo_react_common_1 = require("@progress/kendo-react-common");
/**
 * @hidden
 */
var SelectableItemsContainer = /** @class */ (function (_super) {
    __extends(SelectableItemsContainer, _super);
    function SelectableItemsContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            selectedItemIndex: null,
            isKeyboardNavigationLeftRight: true
        };
        _this.onRequestContainerSelection = function () { return _this.props.onRequestSelection(_this.props.group.selectionIndex); };
        _this.onKeyDown = function (event) {
            var newSelectedItemIndex = null;
            var decrementKeyCode = _this.state.isKeyboardNavigationLeftRight ? kendo_react_common_1.Keys.left : kendo_react_common_1.Keys.up;
            var incrementKeyCode = _this.state.isKeyboardNavigationLeftRight ? kendo_react_common_1.Keys.right : kendo_react_common_1.Keys.down;
            if (event.keyCode === decrementKeyCode) {
                newSelectedItemIndex = _this.navigate(false);
            }
            else if (event.keyCode === incrementKeyCode) {
                newSelectedItemIndex = _this.navigate(true);
            }
            if (newSelectedItemIndex !== null) {
                // Prevent the default behaviour of moving of the scrollbar
                // because scrolling is achieved through item focusing.
                event.preventDefault();
                // Stop propagation to remove the collision with the up/down
                // keyboard navigation of the message list.
                event.stopPropagation();
            }
        };
        return _this;
    }
    SelectableItemsContainer.prototype.componentWillReceiveProps = function (nextProps) {
        if (!this.props.selected && nextProps.selected) {
            this.setState(function (prevState) {
                // Do not reset the selection when it was already set.
                // E.g. Coming here because of a click of the deck scroll buttons
                // or clicking an attachment.
                return prevState.selectedItemIndex ? {} : { selectedItemIndex: 0 };
            });
        }
        else if (this.props.selected && !nextProps.selected) {
            this.setState({ selectedItemIndex: null });
        }
    };
    SelectableItemsContainer.prototype.navigate = function (incrementSelection, newSelectedItemIndexUponFirstIncrement) {
        if (newSelectedItemIndexUponFirstIncrement === void 0) { newSelectedItemIndexUponFirstIncrement = 0; }
        var result = null;
        var currentlySelectedItemIndex = this.state.selectedItemIndex;
        if (incrementSelection) {
            if (currentlySelectedItemIndex === null) {
                result = newSelectedItemIndexUponFirstIncrement;
            }
            else if (currentlySelectedItemIndex < this.getLastSelectionIndex()) {
                result = currentlySelectedItemIndex + 1;
            }
        }
        else {
            if (currentlySelectedItemIndex === null) {
                result = 0;
            }
            else if (currentlySelectedItemIndex > 0) {
                result = currentlySelectedItemIndex - 1;
            }
        }
        if (result !== null) {
            this.setState({ selectedItemIndex: result });
        }
        return result;
    };
    SelectableItemsContainer.prototype.getLastSelectionIndex = function () {
        var result = -1;
        if (this.props.group.type === 'action-group') {
            var actionGroup = this.props.group;
            result = actionGroup.actions ? actionGroup.actions.length - 1 : -1;
        }
        else if (this.props.group.type === 'attachment-group') {
            var attachmentGroup = this.props.group;
            result = attachmentGroup.attachments ? attachmentGroup.attachments.length - 1 : -1;
        }
        return result;
    };
    return SelectableItemsContainer;
}(React.Component));
exports.SelectableItemsContainer = SelectableItemsContainer;
//# sourceMappingURL=SelectableItemsContainer.js.map